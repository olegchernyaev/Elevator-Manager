
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Лифт1	= Справочники.Лифты.Пассажирский1;
	Лифт2	= Справочники.Лифты.Пассажирский2;
	Лифт3	= Справочники.Лифты.ГрузоПассажирский1;
	Лифт4	= Справочники.Лифты.ГрузоПассажирский2;
	
	//используется в обработчике ожидания.
	СкоростьЛифт1 = Лифт1.СкоростьДвижения;
	СкоростьЛифт2 = Лифт2.СкоростьДвижения;
	СкоростьЛифт3 = Лифт3.СкоростьДвижения;
	СкоростьЛифт4 = Лифт4.СкоростьДвижения;
		
	Элементы.ЭтажЛифт1.Подсказка	= Лифт1.Наименование;
	Элементы.ЭтажЛифт2.Подсказка	= Лифт2.Наименование;
	Элементы.ЭтажЛифт3.Подсказка	= Лифт3.Наименование;
	Элементы.ЭтажЛифт4.Подсказка	= Лифт4.Наименование;
	
	//Начальное положение лифтов.
	ЭтажЛифт1 = 1;
	ЭтажЛифт2 = 1;
	ЭтажЛифт3 = 1;
	ЭтажЛифт4 = 1;
	
	Лифт1Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");
	Лифт2Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");
	Лифт3Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");
	Лифт4Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");

	
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьЛифт(Команда)
	
	ЭтажВызова = 0; ЭтажНазначения = 0;
	
	//не добавляем задания, противоречащие логике движения.
	Если Не ВвестиЧисло(ЭтажВызова,"На какой этаж вызывается лифт?",2) ИЛИ ЭтажВызова = 0 ИЛИ ЭтажВызова>25 Тогда 
		Возврат; 
	КонецЕсли;
	
	Если Не ВвестиЧисло(ЭтажНазначения, "Этаж назначения", 2) ИЛИ ЭтажНазначения = 0 ИЛИ ЭтажНазначения>25 ИЛИ ЭтажНазначения = ЭтажВызова Тогда 
		Возврат; 
	КонецЕсли;
	
	НомерПП = ТаблицаЗаданий.Количество() + 1;
	НовСтр = ТаблицаЗаданий.Добавить();
	НовСтр.НомерЗадания		= НомерПП;
	НовСтр.ДатаВызова		= ТекущаяДата();
	НовСтр.ЭтажВызова		= ЭтажВызова;
	НовСтр.ЭтажНазначения	= ЭтажНазначения;
	НовСтр.СтатусЗадания	= ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди");
	
	
	// Назначаем задание свободному лифту. Обработчик ожидания найдет задание и начнет его выполнение
	// На время выполнения статус лифта равен "ВДвижении"
	// Если в момент поступления задания нет свободного лифта, его получит первый освободившийся.
	
	Если Лифт1Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает") Тогда
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт1", СкоростьЛифт1);
	ИначеЕсли Лифт2Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает") Тогда
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт2", СкоростьЛифт2);
	ИначеЕсли Лифт3Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает") Тогда
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт3", СкоростьЛифт3);
	ИначеЕсли Лифт4Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает") Тогда
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт4", СкоростьЛифт4);
	КонецЕсли;
	
КонецПроцедуры

// Логика движения лифтов по кнопке вызова на этаже.
#Область ДвиженияВызоваЛифтов


&НаКлиенте
Процедура ДвижениеВызоваЛифт1()
	
	Лифт1Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.ВДвижении");
	СтруктураПоискаЗадания = Новый Структура;
	
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт1);
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	
	Если МассивЗаданий.Количество() = 0 Тогда
		
		СтруктураПоискаЗадания = Новый Структура;
		СтруктураПоискаЗадания.Вставить("СтатусЗадания", ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди"));
		МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
		
		Если МассивЗаданий.Количество() = 0 Тогда
			Лифт1Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");
			ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт1");
			Возврат;
		КонецЕсли;
		
		Если МассивЗаданий[0].Исполнитель.Пустая() Тогда 
			МассивЗаданий[0].Исполнитель = Лифт1;
		КонецЕсли;
		
		Если МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди") Тогда
			МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
		КонецЕсли;
		
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №1 начал выполнять задание №" + МассивЗаданий[0].НомерЗадания + ". " +
		"Движется по вызову на " + МассивЗаданий[0].ЭтажВызова + " этаж" + Символы.ПС;
		
	КонецЕсли;
	
	ШагЛифта = 0;
	
	Если ЭтажЛифт1 > МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт1 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт1 < МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт1 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт1 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт1 = ЭтажЛифт1 + ШагЛифта;
	Если ЭтажЛифт1 = МассивЗаданий[0].ЭтажВызова Тогда
		ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт1");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №1 прибыл на " + МассивЗаданий[0].ЭтажВызова + " этаж " + Символы.ПС;
		ЭтажВызоваЛифт1 = 0;
		ПодключитьОбработчикОжидания("ЗадержкаПогрузкиВыгрузкиЛифт1", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеВызоваЛифт2()
	
	Лифт2Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.ВДвижении");
	СтруктураПоискаЗадания = Новый Структура;
	
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт2);	
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	
	Если МассивЗаданий.Количество() = 0 Тогда
		
		СтруктураПоискаЗадания = Новый Структура;
		СтруктураПоискаЗадания.Вставить("СтатусЗадания", ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди"));
		МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
		
		Если МассивЗаданий.Количество() = 0 Тогда
			Лифт2Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");
			ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт2");
		Возврат;
		КонецЕсли;
		
		Если МассивЗаданий[0].Исполнитель.Пустая() Тогда 
			МассивЗаданий[0].Исполнитель = Лифт2;
		КонецЕсли;
		
		Если МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди") Тогда
			МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
		КонецЕсли;
		
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №2 начал выполнять задание №" + МассивЗаданий[0].НомерЗадания + ". " +
		"Движется по вызову на " + МассивЗаданий[0].ЭтажВызова + " этаж" + Символы.ПС;
		
	КонецЕсли;
	
	ШагЛифта = 0;
	
	Если ЭтажЛифт2 > МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт2 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт2 < МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт2 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт2 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт2 = ЭтажЛифт2 + ШагЛифта;
	Если ЭтажЛифт2 = МассивЗаданий[0].ЭтажВызова Тогда
		ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт2");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №2 прибыл на " + МассивЗаданий[0].ЭтажВызова + " этаж " + Символы.ПС;
		ЭтажВызоваЛифт2 = 0;
		ПодключитьОбработчикОжидания("ЗадержкаПогрузкиВыгрузкиЛифт2", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеВызоваЛифт3()
	
	Лифт3Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.ВДвижении");
	СтруктураПоискаЗадания = Новый Структура;
	
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт3);	
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	
	Если МассивЗаданий.Количество() = 0 Тогда
		
		СтруктураПоискаЗадания = Новый Структура;
		СтруктураПоискаЗадания.Вставить("СтатусЗадания", ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди"));
		МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
		
		Если МассивЗаданий.Количество() = 0 Тогда
			Лифт3Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");
			ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт3");
		Возврат;
		КонецЕсли;
		
		Если МассивЗаданий[0].Исполнитель.Пустая() Тогда 
			МассивЗаданий[0].Исполнитель = Лифт3;
		КонецЕсли;
		
		Если МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди") Тогда
			МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
		КонецЕсли;
		
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №3 начал выполнять задание №" + МассивЗаданий[0].НомерЗадания + ". " +
		"Движется по вызову на " + МассивЗаданий[0].ЭтажВызова + " этаж" + Символы.ПС;
		
	КонецЕсли;
	
	ШагЛифта = 0;
	
	Если ЭтажЛифт3 > МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт3 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт3 < МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт3 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт3 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт3 = ЭтажЛифт3 + ШагЛифта;
	Если ЭтажЛифт3 = МассивЗаданий[0].ЭтажВызова Тогда
		ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт3");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №3 прибыл на " + МассивЗаданий[0].ЭтажВызова + " этаж " + Символы.ПС;
		ЭтажВызоваЛифт3 = 0;
		ПодключитьОбработчикОжидания("ЗадержкаПогрузкиВыгрузкиЛифт3", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеВызоваЛифт4()
	
	Лифт4Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.ВДвижении");
	СтруктураПоискаЗадания = Новый Структура;
	
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт4);	
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	
	Если МассивЗаданий.Количество() = 0 Тогда
		
		СтруктураПоискаЗадания = Новый Структура;
		СтруктураПоискаЗадания.Вставить("СтатусЗадания", ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди"));
		МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
		
		Если МассивЗаданий.Количество() = 0 Тогда
			Лифт4Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛифта.Простаивает");
			ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт4");
		Возврат;
		КонецЕсли;
		
		Если МассивЗаданий[0].Исполнитель.Пустая() Тогда 
			МассивЗаданий[0].Исполнитель = Лифт4;
		КонецЕсли;
		
		Если МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.ВОчереди") Тогда
			МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
		КонецЕсли;
		
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №4 начал выполнять задание №" + МассивЗаданий[0].НомерЗадания + ". " +
		"Движется по вызову на " + МассивЗаданий[0].ЭтажВызова + " этаж" + Символы.ПС;
		
	КонецЕсли;
	
	ШагЛифта = 0;
	
	Если ЭтажЛифт4 > МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт4 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт4 < МассивЗаданий[0].ЭтажВызова Тогда
		НаправлениеЛифт4 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт4 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт4 = ЭтажЛифт4 + ШагЛифта;
	Если ЭтажЛифт4 = МассивЗаданий[0].ЭтажВызова Тогда
		ОтключитьОбработчикОжидания("ДвижениеВызоваЛифт4");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №4 прибыл на " + МассивЗаданий[0].ЭтажВызова + " этаж " + Символы.ПС;
		ЭтажВызоваЛифт4 = 0;
		ПодключитьОбработчикОжидания("ЗадержкаПогрузкиВыгрузкиЛифт4", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Имитация паузы по загрузке-выгрузке лифта.
#Область ЗадержкаПогрузкиВыгрузкиЛифтов


&НаКлиенте
Процедура ЗадержкаПогрузкиВыгрузкиЛифт1()
	
	СтруктураПоискаЗадания = Новый Структура();
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт1);	 
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
	
	НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
	ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №1 начал движение в направлении " + МассивЗаданий[0].ЭтажНазначения + " этажа" + Символы.ПС;
	ПодключитьОбработчикОжидания("ДвижениеНазначенияЛифт1", СкоростьЛифт1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадержкаПогрузкиВыгрузкиЛифт2()
	
	СтруктураПоискаЗадания = Новый Структура();
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт2);
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
	
	НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
	ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №2 начал движение в направлении " + МассивЗаданий[0].ЭтажНазначения + " этажа" + Символы.ПС;
	ПодключитьОбработчикОжидания("ДвижениеНазначенияЛифт2", СкоростьЛифт2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадержкаПогрузкиВыгрузкиЛифт3()
	
	СтруктураПоискаЗадания = Новый Структура();
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт3);
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
	
	НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
	ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №3 начал движение в направлении " + МассивЗаданий[0].ЭтажНазначения + " этажа" + Символы.ПС;
	ПодключитьОбработчикОжидания("ДвижениеНазначенияЛифт3", СкоростьЛифт3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадержкаПогрузкиВыгрузкиЛифт4()
	
	СтруктураПоискаЗадания = Новый Структура();
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт4);
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	МассивЗаданий[0].СтатусЗадания = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется");
	
	НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
	ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №4 начал движение в направлении " + МассивЗаданий[0].ЭтажНазначения + " этажа" + Символы.ПС;
	ПодключитьОбработчикОжидания("ДвижениеНазначенияЛифт4", СкоростьЛифт4);
	
КонецПроцедуры



#КонецОбласти

// Логика движения лифтов на этаж, который нажали в лифте
#Область ДвижениеНазначенияЛифтов

&НаКлиенте
Процедура ДвижениеНазначенияЛифт1()
	
	СтруктураПоискаЗадания = Новый Структура;
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт1);	
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	
	ШагЛифта = 0;
	
	Если ЭтажЛифт1 > МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт1 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт1 < МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт1 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт1 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт1 = ЭтажЛифт1 + ШагЛифта;
	
	Если ЭтажЛифт1 = МассивЗаданий[0].ЭтажНазначения Тогда
		ОтключитьОбработчикОжидания("ДвижениеНазначенияЛифт1");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		
		ДатаВыполнения = ТекущаяДата();
		
		ОбщееВремяДвижения = ДатаВыполнения - МассивЗаданий[0].ДатаВызова;
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №1 прибыл в конечную точку. Задание №" + МассивЗаданий[0].НомерЗадания + 
		" завершено. Общее время задания: " + ОбщееВремяДвижения + " секунд" + Символы.ПС;
		
		ЭтажНазначенияЛифт1 = 0;
		МассивЗаданий[0].Длительность	= ОбщееВремяДвижения;
		МассивЗаданий[0].СтатусЗадания	= ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполнено");
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт1", СкоростьЛифт1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеНазначенияЛифт2()
	
	СтруктураПоискаЗадания = Новый Структура;
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт2);
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);

	ШагЛифта = 0;
	
	Если ЭтажЛифт2 > МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт2 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт2 < МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт2 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт2 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт2 = ЭтажЛифт2 + ШагЛифта;
	
	Если ЭтажЛифт2 = МассивЗаданий[0].ЭтажНазначения Тогда
		ОтключитьОбработчикОжидания("ДвижениеНазначенияЛифт2");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		
		ДатаВыполнения = ТекущаяДата();
		
		ОбщееВремяДвижения = ДатаВыполнения - МассивЗаданий[0].ДатаВызова;
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №2 прибыл в конечную точку. Задание №" + МассивЗаданий[0].НомерЗадания + 
		" завершено. Общее время задания: " + ОбщееВремяДвижения + " секунд" + Символы.ПС;
		
		ЭтажНазначенияЛифт2 = 0;
		МассивЗаданий[0].Длительность	= ОбщееВремяДвижения;
		МассивЗаданий[0].СтатусЗадания	= ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполнено");
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт2", СкоростьЛифт2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеНазначенияЛифт3()
	
	СтруктураПоискаЗадания = Новый Структура;
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт3);
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	
	ШагЛифта = 0;
	
	Если ЭтажЛифт3 > МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт3 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт3 < МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт3 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт3 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт3 = ЭтажЛифт3 + ШагЛифта;
	
	Если ЭтажЛифт3 = МассивЗаданий[0].ЭтажНазначения Тогда
		ОтключитьОбработчикОжидания("ДвижениеНазначенияЛифт3");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		
		ДатаВыполнения = ТекущаяДата();
		
		ОбщееВремяДвижения = ДатаВыполнения - МассивЗаданий[0].ДатаВызова;
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №3 прибыл в конечную точку. Задание №" + МассивЗаданий[0].НомерЗадания + 
		" завершено. Общее время задания: " + ОбщееВремяДвижения + " секунд" + Символы.ПС;
		
		ЭтажНазначенияЛифт3 = 0;
		МассивЗаданий[0].Длительность	= ОбщееВремяДвижения;
		МассивЗаданий[0].СтатусЗадания	= ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполнено"); 
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт3", СкоростьЛифт3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеНазначенияЛифт4()
	
	СтруктураПоискаЗадания = Новый Структура;
	СтруктураПоискаЗадания.Вставить("Исполнитель",		Лифт4);
	СтруктураПоискаЗадания.Вставить("СтатусЗадания",	ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполняется"));
	
	МассивЗаданий = ТаблицаЗаданий.НайтиСтроки(СтруктураПоискаЗадания);
	
	ШагЛифта = 0;
	
	Если ЭтажЛифт4 > МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт4 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вниз");
		ШагЛифта = -1;
	ИначеЕсли ЭтажЛифт4 < МассивЗаданий[0].ЭтажНазначения Тогда
		НаправлениеЛифт4 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.Вверх");
		ШагЛифта = 1;
	Иначе
		НаправлениеЛифт4 = ПредопределенноеЗначение("Перечисление.НаправленияДвиженияЛифта.ПустаяСсылка");
		ШагЛифта = 0;	
	КонецЕсли;
	
	ЭтажЛифт4 = ЭтажЛифт4 + ШагЛифта;
	
	Если ЭтажЛифт4 = МассивЗаданий[0].ЭтажНазначения Тогда
		ОтключитьОбработчикОжидания("ДвижениеНазначенияЛифт4");
		НомерНовойСтроки = ПолучитьНомерНовойСтрокиХодаВыполнения();
		
		ДатаВыполнения = ТекущаяДата();
		
		ОбщееВремяДвижения = ДатаВыполнения - МассивЗаданий[0].ДатаВызова;
		ХодВыполнения = ХодВыполнения + НомерНовойСтроки + ") " + "Лифт №4 прибыл в конечную точку. Задание №" + МассивЗаданий[0].НомерЗадания + 
		" завершено. Общее время задания: " + ОбщееВремяДвижения + " секунд" + Символы.ПС;
		
		ЭтажНазначенияЛифт4 = 0;
		МассивЗаданий[0].Длительность	= ОбщееВремяДвижения;
		МассивЗаданий[0].СтатусЗадания	= ПредопределенноеЗначение("Перечисление.СтатусыЗаданийЛифта.Выполнено"); 
		ПодключитьОбработчикОжидания("ДвижениеВызоваЛифт4", СкоростьЛифт4);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


&НаКлиенте
Функция ПолучитьНомерНовойСтрокиХодаВыполнения()
	Возврат СтрЧислоСтрок(ХодВыполнения+1);	
КонецФункции

&НаКлиенте
Процедура ОтчетПоРаботеЛифтов(Команда)	
	ТабДок = Неопределено;
	СформироватьТабДокНаСервере(ТабДок);
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция СформироватьТабДокНаСервере(ТабДок)
	
	ТаблицаДляЗапроса = ТаблицаЗаданий.Выгрузить();	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаДляЗапроса.Исполнитель КАК Исполнитель,
	                      |	ТаблицаДляЗапроса.ДатаВызова КАК ДатаВызова,
	                      |	ТаблицаДляЗапроса.Длительность КАК Длительность,
	                      |	ТаблицаДляЗапроса.ЭтажВызова КАК ЭтажВызова,
	                      |	ТаблицаДляЗапроса.ЭтажНазначения КАК ЭтажНазначения,
	                      |	ТаблицаДляЗапроса.СтатусЗадания КАК СтатусЗадания
	                      |ПОМЕСТИТЬ ВТ_Таблица
	                      |ИЗ
	                      |	&ТаблицаДляЗапроса КАК ТаблицаДляЗапроса
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Таблица.Исполнитель КАК Исполнитель,
	                      |	ВТ_Таблица.ДатаВызова КАК ДатаНачалаРаботы,
	                      |	ВТ_Таблица.Длительность КАК Длительность,
	                      |	ВТ_Таблица.ЭтажВызова КАК ЭтажВызова,
	                      |	ВТ_Таблица.ЭтажНазначения КАК ЭтажНазначения,
	                      |	ВТ_Таблица.СтатусЗадания КАК СтатусЗадания,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_Таблица.ЭтажВызова - ВТ_Таблица.ЭтажНазначения < 0
	                      |			ТОГДА -(ВТ_Таблица.ЭтажВызова - ВТ_Таблица.ЭтажНазначения)
	                      |		ИНАЧЕ ВТ_Таблица.ЭтажВызова - ВТ_Таблица.ЭтажНазначения
	                      |	КОНЕЦ КАК ЭтажейПреодолено,
	                      |	ВТ_Таблица.ДатаВызова КАК ДатаОкончанияРаботы,
	                      |	1 КАК КоличествоВызовов
	                      |ПОМЕСТИТЬ ВТ_Рассчет
	                      |ИЗ
	                      |	ВТ_Таблица КАК ВТ_Таблица
	                      |ГДЕ
	                      |	ВТ_Таблица.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийЛифта.Выполнено)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МИНИМУМ(ВТ_Рассчет.ДатаНачалаРаботы) КАК ДатаНачалаРаботы,
	                      |	МАКСИМУМ(ВТ_Рассчет.ДатаОкончанияРаботы) КАК ДатаОкончанияРаботы
	                      |ИЗ
	                      |	ВТ_Рассчет КАК ВТ_Рассчет
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Рассчет.Исполнитель КАК Лифт,
	                      |	СУММА(ВТ_Рассчет.Длительность) КАК ВремяРаботы,
	                      |	СУММА(ВТ_Рассчет.ЭтажейПреодолено) КАК ЭтажейПреодолено,
	                      |	СУММА(ВТ_Рассчет.КоличествоВызовов) КАК КоличествоВызовов
	                      |ИЗ
	                      |	ВТ_Рассчет КАК ВТ_Рассчет
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_Рассчет.Исполнитель
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЭтажейПреодолено УБЫВ,
	                      |	ВремяРаботы УБЫВ,
	                      |	КоличествоВызовов УБЫВ");
	Запрос.УстановитьПараметр("ТаблицаДляЗапроса",ТаблицаДляЗапроса);
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектОбработка.ПолучитьМакет("Макет");
	ЗначениеВРеквизитФормы(ОбъектОбработка,"Объект");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб			= Истина;
	ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	ОбластьШапка		= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовки	= Макет.ПолучитьОбласть("Заголовки");
	ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
	
	
	Даты = РезультатПакет[2].Выбрать();
	
	Если Даты.Следующий() Тогда
		ОбластьШапка.Параметры.ДатаНачалаРаботы			  = Даты.ДатаНачалаРаботы;  
		ОбластьШапка.Параметры.ДатаПоследнегоЗавершенного = Даты.ДатаОкончанияРаботы;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьШапка);
	ТабДок.Вывести(ОбластьЗаголовки);
	
	ИнформацияПоРаботе = РезультатПакет[3].Выгрузить();
	
	Для Каждого СтрокаРезультат из ИнформацияПоРаботе Цикл
		ОбластьСтрока.Параметры.КоличествоВызовов	= СтрокаРезультат.КоличествоВызовов;
		ОбластьСтрока.Параметры.Лифт				= СтрокаРезультат.Лифт;
		ОбластьСтрока.Параметры.ВремяРаботы			= Формат(СтрокаРезультат.ВремяРаботы / 60,"ЧЦ=10; ЧДЦ=2") + " минут.";
		ОбластьСтрока.Параметры.ЭтажейПреодолено	= СтрокаРезультат.ЭтажейПреодолено;
		
		ТабДок.Вывести(ОбластьСтрока);		
	КонецЦикла;
	
	Возврат ТабДок;	
	
КонецФункции






